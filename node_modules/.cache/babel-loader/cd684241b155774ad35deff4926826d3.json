{"ast":null,"code":"var _jsxFileName = \"D:\\\\Shortest_Path_Finder\\\\src\\\\PathfindingVisualizer\\\\PathfindingVisualizer.jsx\";\nimport React, { Component } from 'react';\nimport logo from './gfg-new-logo.png';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n  }\n\n  render() {\n    const {\n      grid,\n      mouseIsPressed\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"Shortest Path Finder\")), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.visualizeDijkstra(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, \"Visualize Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, row.map((node, nodeIdx) => {\n        const {\n          row,\n          col,\n          isFinish,\n          isStart,\n          isWall\n        } = node;\n        return /*#__PURE__*/React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = { ...node,\n    isWall: !node.isWall\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"names":["React","Component","logo","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"sources":["D:/Shortest_Path_Finder/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"sourcesContent":["import React, {Component} from 'react';\r\nimport logo from './gfg-new-logo.png';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div className=\"logo\">\r\n          <p>Shortest Path Finder</p>\r\n        </div>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {row, col, isFinish, isStart, isWall} = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isFinish={isFinish}\r\n                      isStart={isStart}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                      row={row}></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}